import { Game } from '@/components/GameCard';

export const mockGames: Game[] = [
  {
    game_id: "1",
    title: "カタンの開拓者たち",
    player_count: "3-4",
    play_time: 90,
    genre: ["戦略", "交渉", "ファミリー", "陣取り"],
    bgg_link: "https://boardgamegeek.com/boardgame/13/catan",
    markdown_rules: `
## セットアップ
1. **地形タイルの配置**: 六角形の地形タイル19枚をランダムに配置して島を形成します
2. **数字チップの配置**: 各地形タイルに数字チップを配置（砂漠は除く）
3. **初期配置**: 各プレイヤーは開拓地2つとそれに隣接する道2本を配置
4. **初期資源**: 2番目の開拓地に隣接する地形から初期資源を獲得

## ゲームの流れ
各プレイヤーの手番は以下の順序で進行します：

### 1. 資源の産出
- サイコロを2個振り、出目の合計を確認
- 該当する数字チップがある地形タイルに隣接する開拓地/都市の所有者が資源獲得
- 開拓地：1枚、都市：2枚の資源カードを獲得

### 2. 交渉と建設
- **交渉**: 他プレイヤーと資源カードを自由に交換
- **銀行取引**: 4:1レートで資源交換（港があれば有利なレート）
- **建設**: 資源を消費して以下を建設可能
  - 道（木材1+粘土1）
  - 開拓地（木材1+粘土1+羊毛1+小麦1）
  - 都市（鉄鉱石3+小麦2）
  - 発展カード（鉄鉱石1+羊毛1+小麦1）

### 3. 特別なルール
- **盗賊**: 7の目が出たら資源カード8枚以上所持の全プレイヤーは半分を捨てる
- **騎士カード**: 盗賊を移動させ、隣接プレイヤーから資源カード1枚獲得
- **最長交易路**: 5本以上で最長の道を持つプレイヤーが獲得（2勝利点）
- **最大騎士力**: 3枚以上で最多の騎士カードを使ったプレイヤーが獲得（2勝利点）

## 勝利条件
**最初に10勝利点に到達したプレイヤーが勝利**

勝利点の内訳：
- 開拓地：1点
- 都市：2点  
- 最長交易路：2点
- 最大騎士力：2点
- 発展カード（勝利点カード）：1点
`
  },
  {
    game_id: "2", 
    title: "ドミニオン",
    player_count: "2-4",
    play_time: 30,
    genre: ["デッキ構築", "カードゲーム", "戦略"],
    bgg_link: "https://boardgamegeek.com/boardgame/36218/dominion",
    markdown_rules: `
## セットアップ
1. **基本カードの準備**: 銅貨・銀貨・金貨、屋敷・公領・属州を場に配置
2. **王国カードの選択**: 10種類の王国カードをサプライとして場に配置
3. **初期デッキ**: 各プレイヤーは銅貨7枚・屋敷3枚を受け取りシャッフル
4. **初期手札**: 山札から5枚を引いて手札とする

## ゲームの流れ
各手番は**A・B・C**の3フェーズで構成：

### A. アクションフェーズ
- 手札からアクションカード1枚をプレイ可能
- カードの効果により追加のアクション・購入・コインを獲得可能
- 複数のアクションがある場合は順次実行

### B. 購入フェーズ  
- 手札の財宝カード（銅貨・銀貨・金貨）をプレイして購入力を獲得
- 購入力に応じてサプライからカード1枚を購入
- 購入したカードは捨て札置き場に配置

### C. クリーンアップフェーズ
- 手札と場に出したカードをすべて捨て札に移動
- 山札から新たに5枚のカードを引く
- 山札が足りない場合は捨て札をシャッフルして山札を再構築

## 重要なルール
- **購入**: 基本的に1手番1購入だが、カード効果で追加購入可能
- **デッキサイクル**: 山札が尽きたら捨て札をシャッフルして新しい山札に
- **手札上限**: 手札上限はなし（クリーンアップ時に5枚引く）
- **サプライ枯渇**: 購入できるカードがなくなったらその山札は購入不可

## 勝利条件
以下のいずれかでゲーム終了、最も勝利点の高いプレイヤーが勝利：

1. **属州の山札が空になる**
2. **任意の3つの山札が空になる**

勝利点計算：
- 屋敷：1勝利点
- 公領：3勝利点  
- 属州：6勝利点
- その他の勝利点カード：カードに記載された点数
`
  },
  {
    game_id: "3",
    title: "アズール",
    player_count: "2-4", 
    play_time: 45,
    genre: ["タイル配置", "パズル", "戦略", "美しいコンポーネント"],
    bgg_link: "https://boardgamegeek.com/boardgame/230802/azul",
    markdown_rules: `
## セットアップ
1. **個人ボードの配置**: 各プレイヤーは個人ボードを受け取る
2. **工場展示の準備**: プレイヤー数×2+1枚の工場展示タイルを円形に配置
3. **タイルの配置**: 各工場展示に異なる色のタイル4枚をランダムに配置
4. **中央エリア**: 工場展示の中央に先手マーカーを配置

## ゲームの流れ
ゲームは複数ラウンド行い、各ラウンドは以下の3フェーズ：

### 1. タイル獲得フェーズ
プレイヤーは順番に以下のいずれかを実行：

**A. 工場展示から獲得**
- 工場展示から同じ色のタイル全てを取る
- 残りのタイルは中央エリアに移動

**B. 中央エリアから獲得**  
- 中央エリアから同じ色のタイル全てを取る
- 初めて中央から取ったプレイヤーは先手マーカーも獲得

### 2. タイル配置フェーズ
獲得したタイルを個人ボードの**準備エリア**に配置：

- **配置ルール**: 同じ行には同じ色のタイルのみ配置可能
- **必要枚数**: 各行の必要枚数（1行目：1枚、2行目：2枚...5行目：5枚）
- **余剰タイル**: 配置できないタイルは床ライン（マイナス点エリア）へ

### 3. 壁面装飾フェーズ
準備エリアが完成した行のタイルを**壁面**に移動：

- 完成した行の右端のタイル1枚を対応する壁面の位置に配置
- 残りのタイルは捨て札に
- **得点計算**: 配置したタイルから縦横に連続するタイル数の合計が得点

## 得点計算の詳細
- **単独配置**: 1点
- **横に連続**: 横に連続するタイル数の合計
- **縦に連続**: 縦に連続するタイル数の合計  
- **床ラインペナルティ**: -1、-1、-2、-2、-2、-3、-3点

## ゲーム終了と最終得点
**終了条件**: いずれかのプレイヤーの壁面で1行が完成

**ボーナス得点**:
- 横一列完成：+2点×完成行数
- 縦一列完成：+7点×完成列数  
- 同色5枚完成：+10点×完成色数
`
  },
  {
    game_id: "4",
    title: "ウイングスパン", 
    player_count: "1-5",
    play_time: 75,
    genre: ["エンジンビルド", "カードプレイ", "自然", "戦略"],
    bgg_link: "https://boardgamegeek.com/boardgame/266192/wingspan",
    markdown_rules: `
## セットアップ
1. **個人ボード**: 各プレイヤーは鳥類保護区ボードを受け取る
2. **初期リソース**: 食料5個、鳥カード5枚、ボーナスカード2枚を配布
3. **ボーナスカード選択**: ボーナスカード2枚から1枚を選択（1枚は戻す）
4. **共通エリア**: 鳥カード3枚を鳥カードトレイに公開
5. **目標タイル**: ラウンド目標タイル4枚をランダムに配置

## ゲームの流れ
ゲームは4ラウンド制、各ラウンドでアクション数が減少（8→7→6→5回）

### 基本アクション（4種類）
各手番で以下のいずれか1つを選択：

**1. 鳥カードをプレイ**
- 手札から鳥カード1枚を対応する生息地にプレイ
- 食料コスト・卵コスト・鳥カードコストを支払う
- カードの能力は即座に発動

**2. 森林エリアでの採餌**
- ダイスタワーから食料ダイスを獲得
- エリアの鳥の能力を右から左へ順次発動
- より多くの鳥がいるほど効率的に食料獲得

**3. 草原エリアでの産卵**
- 草原の鳥に卵を配置
- 1羽あたり最大卵容量まで配置可能
- 鳥の能力により追加効果を獲得

**4. 湿地エリアでのカード獲得**
- 鳥カードトレイまたは山札から鳥カードを獲得
- 既存の鳥の能力を発動
- 手札上限は設定なし

### 鳥の能力タイミング
- **即時効果**: カードプレイ時に即座に発動
- **継続効果**: 常に有効な効果
- **アクション時効果**: 対応するエリアでアクション実行時に発動

## ラウンド終了と得点
各ラウンド終了時：
1. **ラウンド目標の達成チェック**: 達成度に応じて勝利点獲得
2. **食料の破棄**: 鳥カードに記載されたもの以外は全て破棄
3. **先手の移動**: 時計回りに先手が移動

## 最終得点計算
- **鳥カード**: 各カードの勝利点
- **ボーナスカード**: 達成条件による勝利点
- **ラウンド目標**: 各ラウンドで獲得した勝利点
- **卵**: 1個につき1勝利点
- **キャッシュされた食料**: 鳥カードの下の食料1個につき1勝利点
- **キャッシュされたカード**: 鳥カードの下のカード1枚につき1勝利点

**最も多くの勝利点を獲得したプレイヤーが勝利**
`
  },
  {
    game_id: "5",
    title: "スプレンダー",
    player_count: "2-4", 
    play_time: 30,
    genre: ["エンジンビルド", "セットコレクション", "戦略"],
    bgg_link: "https://boardgamegeek.com/boardgame/148228/splendor", 
    markdown_rules: `
## セットアップ
1. **発展カードの配置**: レベル1〜3の発展カードを各4枚ずつ、3列に分けて配置
2. **貴族タイルの配置**: プレイヤー数+1枚の貴族タイルをランダムに配置
3. **宝石トークンの準備**: 各色の宝石トークンを色別に配置（2人：4個、3人：5個、4人：7個）
4. **金（万能宝石）**: 5個を別途配置

## ゲームの流れ
プレイヤーは手番で以下の4つのアクションから1つを選択：

### 1. 宝石トークンの獲得
**A. 異なる色3個を取る**
- 利用可能な異なる色の宝石トークン3個まで獲得
- 在庫がない色は選択不可

**B. 同じ色2個を取る** 
- 同じ色の宝石トークン2個を獲得
- その色のトークンが4個以上ある場合のみ実行可能

### 2. 発展カードの購入
- 場の発展カードまたは予約済みカードを購入
- 必要な宝石を支払い（所持する発展カードのボーナスで軽減可能）
- 金は任意の色として使用可能
- 購入した発展カードは個人エリアに配置

### 3. 発展カードの予約
- 場の発展カードまたは山札の一番上を予約
- 金トークン1個を獲得（在庫がある場合）
- 予約できるカードは最大3枚まで
- 予約したカードは他プレイヤーは購入不可

### 4. パス
- 何もアクションを行わない（通常は選択しない）

## 発展カードの効果
- **勝利点**: カードに記載された勝利点を獲得
- **宝石ボーナス**: 永続的な宝石供給（購入コスト軽減に使用）
- **貴族の注目**: 特定の組み合わせで貴族タイルを獲得

## 貴族タイル
- **獲得条件**: 手番終了時に必要な発展カードを所持している場合自動獲得
- **勝利点**: 各貴族タイル3勝利点
- **上限**: 1手番に1枚まで、複数条件を満たしても1枚のみ

## 手札制限
宝石トークンは最大10個まで所持可能
- 10個を超える場合は即座に10個になるまで返却

## 勝利条件
**15勝利点に到達したプレイヤーが出た手番で、そのラウンドを完了**
- ラウンド完了後、最も勝利点の高いプレイヤーが勝利
- 同点の場合は発展カード数の少ないプレイヤーが勝利
`
  }
];

// Simulated API delay
export const searchGames = async (query: string): Promise<Game[]> => {
  // Simulate network delay
  await new Promise(resolve => setTimeout(resolve, 500 + Math.random() * 1000));
  
  if (!query.trim()) {
    return [];
  }

  // Search through mock data
  const results = mockGames.filter(game => 
    game.title.toLowerCase().includes(query.toLowerCase()) ||
    game.genre.some(genre => genre.toLowerCase().includes(query.toLowerCase()))
  );

  // Simulate no results for certain queries
  if (query.toLowerCase().includes('存在しない') || query.toLowerCase().includes('test404')) {
    throw new Error('検索結果が見つかりませんでした。');
  }

  return results;
};